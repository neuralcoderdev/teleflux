package org.neuralcoder.teleflux.di.processor.generate;

import com.squareup.javapoet.*;
import org.neuralcoder.teleflux.di.processor.env.ProcessorEnv;
import org.neuralcoder.teleflux.di.processor.env.ProcessorOptions;
import org.neuralcoder.teleflux.di.processor.index.ComponentIndexModel;

import javax.lang.model.element.Modifier;

/**
 * Writes a ComponentIndex class that lists all discovered components/modules.
 * Runtime can load it directly without reflection.
 */
public final class GeneratedIndexWriter {
    private final ProcessorEnv env;

    public GeneratedIndexWriter(ProcessorEnv env) {
        this.env = env;
    }

    public JavaFile write(ComponentIndexModel model) {
        String fqcn = env.options.indexClass;
        int lastDot = fqcn.lastIndexOf('.');
        String pkg = (lastDot > 0) ? fqcn.substring(0, lastDot) : "";
        String simple = (lastDot > 0) ? fqcn.substring(lastDot + 1) : fqcn;

        TypeSpec.Builder type = TypeSpec.classBuilder(simple)
                .addJavadoc("Generated by Teleflux DI Processor. Do not edit.\n")
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL);

        // public static final String[] COMPONENTS = {...}
        ArrayTypeName arrayStr = ArrayTypeName.of(String.class);
        FieldSpec components = FieldSpec.builder(arrayStr, "COMPONENTS", Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                .initializer(model.toArrayInitializer())
                .build();

        type.addField(components);

        return JavaFile.builder(pkg, type.build()).build();
    }
}
